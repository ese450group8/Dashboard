<!DOCTYPE html>
<html>
  <head>
    <title>Senior Design</title>
    <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
  	<script src="http://code.jquery.com/jquery-1.8.3.min.js" type="text/javascript" charset="utf-8"></script>
	<script src="jquery.tipsy.js" type="text/javascript" charset="utf-8"></script>
	<link rel="stylesheet" href="http://onehackoranother.com/projects/jquery/tipsy/stylesheets/tipsy.css" type="text/css" title="no title" charset="utf-8"/>
	<style type="text/css">
		.axis path,
		.axis line {
		  fill: none;
		  stroke: #000;
		  shape-rendering: crispEdges;
		  opacity: 1;
	}

		.axis text { font-size:10px; }

		body { font: 12px sans-serif; }
		.circles { opacity: .5; }

		.tipsy { font-size:11px; margin-top:-10px;}

		.guide line {
		  fill: none;
		  stroke: #000;
		  shape-rendering: crispEdges;
		  opacity: 0;
	}
	</style>
	</head>
	<body>
	<div id="chart">

	<script type="text/javascript">

		// Global Variables
		var thisID;
		var thisMonth;
		var thisYear;

		var colors = [];
		colors["Postprandial"] = d3.rgb(0, 0, 155);
		colors["Preprandial"] = d3.rgb(255, 128, 0);
		colors["Random"] = d3.rgb(0, 0, 0);

		// Reads in the input PatientID
		function recordPatient() {
		    var inputID = document.getElementById('patID').value;
		    if (!isInt(inputID)) {
		    	alert("Please submit a valid Patient ID");
		    } else {
		    	thisID = inputID;
		    }
		}

		// Reads in the input month
		function recordMonth() {
			var inputMonth = document.getElementById('moID').value;
			if (!isInt(inputMonth)) {
		    	alert("Please submit a valid month");
		    } else {
		    	thisMonth = inputMonth;
		    }
		}

		// Reads in the input year
		function recordYear() {
			var inputYear = document.getElementById('yID').value;
			if (!isInt(inputYear)) {
		    	alert("Please submit a valid year");
		    } else {
		    	thisYear = inputYear;
		    }
		}

		// Returns true if value is valid integer
		function isInt(value) {
	  		return !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));
		}

		// set the stage
		var margin = {t:30, r:20, b:20, l:40 },
			w = 600 - margin.l - margin.r,
			h = 500 - margin.t - margin.b,
			x = d3.scale.linear().range([0, w]),
			y = d3.scale.linear().range([h - 60, 0]),
			//colors that will reflect pre or post prandial
			color = d3.scale.category10();

		var svg = d3.select("#chart").append("svg")
			.attr("width", w + margin.l + margin.r)
			.attr("height", h + margin.t + margin.b);

		// set axes, as well as details on their ticks
		var xAxis = d3.svg.axis()
			.scale(x)
			.ticks(20)
			.tickSubdivide(true)
			.tickSize(6, 3, 0)
			.orient("bottom");

		var yAxis = d3.svg.axis()
			.scale(y)
			.ticks(20)
			.tickSubdivide(true)
			.tickSize(6, 3, 0)
			.orient("left");

		// group that will contain all of the plots
		var groups = svg.append("g").attr("transform", "translate(" + margin.l + "," + margin.t + ")");

		// array of the regions, used for the legend
		var regions = ["Postprandial", "Preprandial", "Random"];

		// bring in the data, and do everything that is data-driven
		d3.csv("glucoseData.csv", function(data) {

		// sort data alphabetically by region, so that the colors match with legend
		//data.sort(function(a, b) { return d3.ascending(a.region, b.region); })

		//var x0 = Math.max(-d3.min(data, function(d) { return d.trust; }), d3.max(data, function(d) { return d.trust; }));
			x.domain([0, 30]);
			y.domain([0, 500])
		

			// the legend color guide
			var legend = svg.selectAll("rect")
					.data(regions)
				.enter().append("rect")
				.attr({
				  x: function(d, i) { return (40 + i*80); },
				  y: h,
				  width: 50,
				  height: 12
				})
				.style("fill", function(d) { return colors[d]; });


				// legend labels	
				svg.selectAll("text")
					.data(regions)
				.enter().append("text")
				.attr({
				x: function(d, i) { return (40 + i*80); },
				y: h + 24,
				})
				.text(function(d) { return d; });

				// draw axes and axis labels
				svg.append("g")
					.attr("class", "x axis")
					.attr("transform", "translate(" + margin.l + "," + (h - 60 + margin.t) + ")")
					.call(xAxis);

				svg.append("g")
					.attr("class", "y axis")
					.attr("transform", "translate(" + margin.l + "," + margin.t + ")")
					.call(yAxis);

				svg.append("text")
					.attr("class", "x label")
					.attr("text-anchor", "end")
					.attr("x", w + 50)
					.attr("y", h - margin.t - 5)
					.text("Day of Month");

				svg.append("text")
					.attr("class", "y label")
					.attr("text-anchor", "end")
					.attr("x", -20)
					.attr("y", 45)
					.attr("dy", ".75em")
					.attr("transform", "rotate(-90)")
					.text("Blood Glucose Level");
		});
		
		// Plots the data points
		function updateGraph() {
			// Deletes previous data point circles
			d3.selectAll(".circles").remove();

			recordPatient();
			recordMonth();
			recordYear();

			var patSum = 0;
			d3.csv("mealData.csv", function(mdata) {
		  		var mealData = [];
		  		for (var index in mdata) {
					mealData.push(mdata[index]);
		  			var hour = parseInt(mdata[index].time.slice(11,13));
		  			var minute = parseInt(mdata[index].time.slice(14,16));
		  			if (hour >= 4 && hour <= 10) {
		  				mealData[index].meal = 'breakfast';
		   			} else if (hour >= 11 && hour <= 16) {
		   				mealData[index].meal = 'lunch';
		   			} else if ((hour >= 17 && hour <= 23) || hour <= 3) {
		   				mealData[index].meal = 'dinner';
		   			}
		  		}
		  		d3.csv("glucoseData.csv", function (gdata) {
				    var postprandial = [];
					var preprandial = [];
					var random = [];
					var temp = [];
					var glucData = [];

		  			for (var glucose in gdata) {
		  				glucData.push(gdata[glucose]);
		  				for (var meal in mealData) {
		  					if (gdata[glucose].time.slice(0,10) === mealData[meal].time.slice(0,10)) {
		  						var gHour = parseInt(gdata[glucose].time.slice(11,13));
		  						var mHour = parseInt(mealData[meal].time.slice(11,13));
		  						var gMinute = parseInt(gdata[glucose].time.slice(14,16));
		  						var mMinute = parseInt(mealData[meal].time.slice(14,16));

								// 1: postprandial, 2: preprandial, 3: random
								if ((gHour - mHour >= 2 && gHour - mHour <= 3) || 
									(gHour - mHour == 1 && gMinute - mMinute == 0)) {
									glucData[glucose].flag = 'Postprandial';
									glucData[glucose].meal = mealData[meal].meal;
									break;
								} else if ((mHour - gHour == 0 && mMinute - gMinute > 0) || 
											(mHour - gHour == 1 && mMinute - gMinute == 0)) {
									glucData[glucose].flag = 'Preprandial';
									glucData[glucose].meal = mealData[meal].meal;
								} else if (typeof glucData[glucose].flag == 'undefined') {
									glucData[glucose].flag = 'Random';
								}
		  					}
		  				}
		  			}
		 
				for (var index in glucData) {
					if (glucData[index].ID == thisID && parseInt(glucData[index].time.slice(5, 7)) == thisMonth
						&& parseInt(glucData[index].time.slice(0, 4)) == thisYear) {
						if (document.getElementById("Postprandial").checked && glucData[index].flag === 'Postprandial') {
							temp.push(glucData[index]);
						} else if (document.getElementById("Preprandial").checked && glucData[index].flag === 'Preprandial') {
							temp.push(glucData[index]);	
						} else if (document.getElementById("Random").checked && glucData[index].flag === 'Random') {
							temp.push(glucData[index]);
						} else if (document.getElementById("All").checked) {
							temp.push(glucData[index]);
						}
	
						// calculate sum of selected patient's glucose levels for that month to compute patient average
						//patSum = patSum + parseInt(data[index].glucose);
					}
				}
				//var patAvg = patSum / (temp.length);
				//for (var index in temp) {
					// Flag is true when the patient's glucose reading is higher than normal
				//	temp[index].flag = temp[index].glucose > patAvg;
				//}

				// style the circles, set their locations based on data
				var circles =
				groups.selectAll("circle")
					.data(temp)
				  .enter().append("circle")
				  .attr("class", "circles")
				  .attr({
				    cx: function(d) { return x(+d.time.slice(8, 10)); },
				    cy: function(d) { return y(+d.glucose); },
				    r: 8 // size of balls
				    //id: function(d) { return d.glucose; }
				  })
				  // possibility: give a different color for balls based on pre/postprandial
					.style("fill", function(d) { return colors[d.flag]; });


				// what to do when we mouse over a bubble
				var mouseOn = function() { 
					var circle = d3.select(this);

				// transition to increase size/opacity of bubble
					circle.transition()
					.duration(800).style("opacity", 1)
					.attr("r", 16).ease("elastic");

					// append lines to bubbles that will be used to show the precise data points.
					// translate their location based on margins
					svg.append("g")
						.attr("class", "guide")
					.append("line")
						.attr("x1", circle.attr("cx"))
						.attr("x2", circle.attr("cx"))
						.attr("y1", +circle.attr("cy") + 26)
						.attr("y2", h - margin.t - margin.b)
						.attr("transform", "translate(40,20)")
						.style("stroke", circle.style("fill"))
						.transition().delay(200).duration(400).styleTween("opacity", 
									function() { return d3.interpolate(0, .5); })

					svg.append("g")
						.attr("class", "guide")
					.append("line")
						.attr("x1", +circle.attr("cx") - 16)
						.attr("x2", 0)
						.attr("y1", circle.attr("cy"))
						.attr("y2", circle.attr("cy"))
						.attr("transform", "translate(40,30)")
						.style("stroke", circle.style("fill"))
						.transition().delay(200).duration(400).styleTween("opacity", 
									function() { return d3.interpolate(0, .5); });

				// function to move mouseover item to front of SVG stage, in case
				// another bubble overlaps it
				d3.selection.prototype.moveToFront = function() { 
				  return this.each(function() { 
					this.parentNode.appendChild(this); 
				  }); 
				};

				// skip this functionality for IE9, which doesn't like it
				if (!$.browser.msie) {
					circle.moveToFront();	
					}
				};
				// what happens when we leave a bubble?
				var mouseOff = function() {
					var circle = d3.select(this);

					// go back to original size and opacity
					circle.transition()
					.duration(800).style("opacity", .5)
					.attr("r", 8).ease("elastic");

					// fade out guide lines, then remove them
					d3.selectAll(".guide").transition().duration(100).styleTween("opacity", 
									function() { return d3.interpolate(.5, 0); })
						.remove()
				};

				// run the mouseon/out functions
				circles.on("mouseover", mouseOn);
				circles.on("mouseout", mouseOff);

				// control what shows after hovering mouse over a ball
				circles.append("title")
						.text(function(d) { return d.glucose + " mg/dL"; })

				$(".circles").tipsy({ gravity: 's', });
		  		});
			});
		}
	</script>


	<br><label>Enter Patient ID:</label><br>
	<input type="text" list="patientID" id="patID">
	  	<datalist id="patientID">
	  	</datalist>
	<br><br><label>Enter Month:</label><br>
	<input type="text" list="monthID" id="moID">
	  	<datalist id="monthID">
	  	</datalist>
  	<br><br><label>Enter Year:</label><br>
  	<input type="text" list="yearID" id="yID">
	  	<datalist id="yearID">
	  	</datalist>
  	<br><br>
  	<input type="radio" name="filter" id="All">All
  	<input type="radio" name="filter" id="Postprandial">Postprandial
	<input type="radio" name="filter" id="Preprandial">Preprandial
	<input type="radio" name="filter" id="Random">Random
  	<br><br><button onclick="updateGraph()">Submit</button>


	<script type="text/javascript">
	var patOptions = '';
	var monthOptions = '';
	var yearOptions = '';
	d3.csv("glucoseData.csv", function(data) {
		for (var index in data) {
			// Add PatientID option if it doesn't exist already
			if (patOptions.indexOf(data[index].ID) == -1) {
				patOptions += '<option value="' + data[index].ID + '" />';
			}
		}
		document.getElementById('patientID').innerHTML = patOptions;
	});
	
	for (var i = 0; i < 12; i++) {
		monthOptions += '<option value="' + (i+1) + '" />';
		yearOptions += '<option value ="' + (2005+i) + '" />';
	};
	document.getElementById('monthID').innerHTML = monthOptions;
	document.getElementById('yearID').innerHTML = yearOptions;
	document.getElementById("All").checked = true;
  	</script>


	</div>
	</body>
	</html>
